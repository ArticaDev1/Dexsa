{"version":3,"sources":["preloader.scss","../../node_modules/bootstrap/scss/mixins/_breakpoints.scss"],"names":[],"mappings":"AAKA;EACE,SAAS,EAAA;;AAEX;EACE,eAAe;EACf,eAAe;EACf,WAAW;EACX,YAAY;EACZ,sCAAsC;EACtC,UAAU;EACV,kBAAkB;EAClB,6BAA6B,EAAA;EAC7B;IACE,kBAAkB;IAClB,QAAO;IACP,SAAQ;IACR,UAAU;IACV,gCAAgC,EAAA;EAElC;IACE,4BAA4B,EAAA;EAE9B;IACE,UAAU,EAAA;IADX;MAGG,oEAA4D;cAA5D,4DAA4D,EAAA;EAGhE;IACE,WAAW;IACX,YAAY;IACZ,WAAW,EAAA;EAEb;IACE,kBAAkB;IAClB,sCAAsC;IACtC,WAAW;IACX,YAAY;IACZ,QAAQ;IACR,OAAO,EAAA;ECgCP;ID7BA;MACE,WAAW,EAAA,EACZ;EC2BD;IDxBA;MACE,WAAW,EAAA,EACZ;;AAIL;EACE;IAAI,UAAS,EAAA;EACb;IAAK,UAAS,EAAA;EACd;IAAK,UAAS,EAAA;EACd;IAAK,aAAY,EAAA;EACjB;IAAK,UAAS,EAAA;EACd;IAAM,UAAS,EAAA,EAAA;;AANjB;EACE;IAAI,UAAS,EAAA;EACb;IAAK,UAAS,EAAA;EACd;IAAK,UAAS,EAAA;EACd;IAAK,aAAY,EAAA;EACjB;IAAK,UAAS,EAAA;EACd;IAAM,UAAS,EAAA,EAAA","file":"../preloader.css","sourcesContent":["@import \"./components/variables\";\n@import \"../../node_modules/bootstrap/scss/functions\";\n@import \"../../node_modules/bootstrap/scss/variables\";\n@import \"../../node_modules/bootstrap/scss/mixins/breakpoints\";\n\nbody {\n  margin: 0; \n}\n.preloader {\n  position: fixed;\n  z-index: 100000;\n  width: 100%;\n  height: 100%;\n  background-color: var(--color-main-bg);\n  opacity: 0;\n  visibility: hidden;\n  transition: 500ms ease-in-out;\n  &__content, &__background {\n    position: absolute;\n    top:50%;\n    left:50%;\n    width: 8vw;\n    transform: translate(-50%, -50%);\n  }\n  &__background {\n    color: rgba(43, 43, 43, 0.5);\n  }\n  &__content {\n    opacity: 0;\n    &.animate {\n      animation: preloader_flickering_animation 1s linear forwards;\n    }\n  }\n  &__icon {\n    width: 100%;\n    height: auto;\n    color: #fff;\n  }\n  &__shadow {\n    position: absolute;\n    transform: translateY(-50%) scale(1.5);\n    width: 100%;\n    height: auto;\n    top: 50%;\n    left: 0;\n  }\n  @include media-breakpoint-down(lg) {\n    &__content, &__background {\n      width: 12vw;\n    }\n  }\n  @include media-breakpoint-down(sm) {\n    &__content, &__background {\n      width: 20vw;\n    }\n  }\n}\n  \n@keyframes preloader_flickering_animation {\n  0% {opacity:0;}\n  14% {opacity:1;}\n  27% {opacity:0;}\n  52% {opacity:0.55;}\n  77% {opacity:0;}\n  100% {opacity:1;}\n}\n\n  ","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @if not $n {\n    @error \"breakpoint `#{$name}` not found in `#{$breakpoints}`\";\n  }\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width.\n// The maximum value is reduced by 0.02px to work around the limitations of\n// `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $max: map-get($breakpoints, $name);\n  @return if($max and $max > 0, $max - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max(breakpoint-next($name, $breakpoints));\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n"]}